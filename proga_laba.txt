#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define NODE struct node

NODE
{
    NODE *prev;
    char word[100];
    NODE *next;
};
NODE* vvod();
void print (NODE *head);
NODE* vstavka (NODE *head);//, NODE *prev, long int k);
NODE* elem(NODE* new_word[100]);

int main()
{
    long int k = 0;
    NODE *head;
    head = NULL;
    head=vvod(head);
    print (head);
    //vstavka(head, k);
    //printf ("\n");
    //print (head);
    return 0;
};

NODE* vvod(NODE* head)
{
    long int k = 0;
    NODE *prev, *tail;
    NODE *p;
    head = NULL;
    tail = NULL;
    char newWord[100];

    while (*gets(newWord))
    {
        p = (NODE *) malloc (sizeof(NODE));

        strcpy(p->word, newWord);
        p->next = NULL;

        if (!head)
        {
           head = p;
           p->prev = NULL;
           tail = p;
        }
        else
        {
            p->prev = tail;
            tail->next = p;
            tail = p;
        };
        k++;
    }
    return(head);
}


NODE* elem(NODE* new_word[100])
{
    NODE* q;
    q = (NODE*)malloc(sizeof(NODE));



}
void print (NODE *head)// long int k)
{
    //NODE* flag;
    NODE *p;
    //flag = head;
    p = head;
    while (p)
    {
        printf ("%s\n", p -> word);
        p = p -> next;
    };
};

NODE* vstavka (NODE *head)// NODE* prev, long int k)
{
    NODE *q, *p;
    char find_word[100];
    char new_word[100];
    gets(compare);
    gets(new_word);
    p = head;
    while(p)
    {
        if (strcmp(find_word, p->word) = 0)
        {

        q = elem(new_word);
        q->next = p->next;



    }






}

/*NODE* deleteWord (NODE *head, long int k)
{
    NODE *q, *p, *z;
    char buffer[150];
    q = head;
    z = head;

    strncpy (buffer, z->word, sizeof (z->word));
    while (z -> next)
    {
        while (q -> next)
        {
            if (!strcmp(q -> next -> word, buffer))
            {
                p = q -> next;
                q -> next = p -> next;

                free (p);
            }
            else
            {
                q = q -> next;
            };
        };
        z = z -> next;
        q = z;
        strncpy (buffer, z -> word, sizeof (z -> word));

        if (z == NULL)
            break;
    };
    return head;
};
*/
